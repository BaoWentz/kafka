version: '2'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    restart: unless-stopped
    depends_on: [ zookeeper ]
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 172.20.10.64  # 广播主机名称，一般用IP指定
      # KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'  # 自动创建topic
      # KAFKA_CREATE_TOPICS: "test:1:3:compact"  # Topic test will have 1 partition and 3 replicas and cleanup.policy set to compact
      KAFKA_LISTENERS: PLAINTEXT://:9092  # Kafka启动所使用的的协议及端口
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://172.20.10.64:9092  # Kafka广播地址及端口，也就是告诉客户端，使用什么地址和端口能连接到Kafka，这个很重要，如果不指定，宿主机以外的客户端将无法连接到Kafka，比如我这里因为容器与宿主机做了端口映射，所以广播地址采用的是宿主机的地址及端口，告诉客户端只要连接到宿主机的指定端口就行了
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181  # Zookeeper连接地址，格式：zoo1：port1,zoo2:port2:/path
      KAFKA_BROKER_ID: 1  # 指定BrokerId，如果不指定，将会自己生成
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # 使得在容器内可以使用docker ps、docker port等命令
  # producer:  # 生产者服务
  #   stdin_open: true  # 交互输入
  #   tty: true  # 交互输出
  #   restart: unless-stopped
  #   image: wentzbao/onnxruntime
  #   volumes:
  #     - /home/ecnu-lzw/bwz/ocr-gy:/home/ecnu-lzw/bwz/ocr-gy  # 把项目映射过来
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #   working_dir: /home/ecnu-lzw/bwz/ocr-gy/Kafka/Producer
  #   command: ['python3', 'testkafka.py', 'p', 'g', 'k']
  # consumer:  # 消费者服务
  #   stdin_open: true  # 交互输入
  #   tty: true  # 交互输出
  #   restart: unless-stopped
  #   image: wentzbao/onnxruntime
  #   volumes:
  #     - /home/ecnu-lzw/bwz/ocr-gy:/home/ecnu-lzw/bwz/ocr-gy  # 把项目映射过来
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #   working_dir: /home/ecnu-lzw/bwz/ocr-gy/Kafka/Producer
  #   command: ['python3', 'testkafka.py', 'c', 'g', 'k']
